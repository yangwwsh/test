<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="apigw_overview" xml:lang="en-us">
<title><ph conref="apigw_conref.dita#common/apigw"/><ph rev="rev760"/></title>
<shortdesc>An <ph conref="apigw_conref.dita#common/apigw"/> receives API requests and
routes the request to a matching API that is provisioned natively in the <ph
conref="apigw_conref.dita#common/apigw"/>. The <ph
conref="apigw_conref.dita#common/apigw"/> then runs the assembly of the API to respond
to the request.</shortdesc>
<conbody>
<p>You can develop and manage the following types of APIs on the <ph
conref="apigw_conref.dita#common/idag2nd"/>.<dl>
<dlentry>
<dt>REST API</dt>
<dd>Indicates a REST API that is compliant with version 2.0 of the Swagger specification.</dd>
</dlentry>
<dlentry>
<dt>OAuth API</dt>
<dd>Indicates an OAuth 2.0 provider API that contains the authorization and token endpoints of an
OAuth flow.</dd>
</dlentry>
<!--This is not implemented yet. Worked on by Krithika's team, however, might not be an option here.-->
</dl></p>
<p>The <ph conref="apigw_conref.dita#common/apigw"/> allows you to manage APIs in the
following pattern:<ul>
<li>You can develop APIs in the <ph conref="apigw_conref.dita#common/idag2nd"/> by
creating each API as an API definition configuration.</li>
<li>You can secure APIs by defining security requirements at the API-level and the
operation-level.</li>
<li>You can expose an API for client access by adding the API into an API plan. You can package a
list of APIs in an API plan and define the rate limit settings for the plan.</li>
<li>To access an API in DataPower, a client must subscribe to at least one API plan that contains
the target API. You can create subscriber profiles to be used for client identification. A client is
identified through API keys that are carried in the request.<p>As shown in <xref
href="#apigw_overview/subscription" format="dita"/>:<ul>
<li>Subscriber X is allowed to access API set 1 and API set 2 through Plan A.</li>
<li>Subscriber Y is allowed to access API set 2 through Plan B.</li>
<li>Subscriber Z is allowed to access API set 3 through Plan C.</li>
</ul>Therefore, to access an API in API set 2, the client must be identified as subscriber X or Y.
<fig id="subscription">
<title>Subscribers, plans, and APIs</title>
<image href="apigw_subscription.gif" width="400" placement="break" align="left"/>
</fig></p></li>
</ul></p>
<p>In addition to the common API management pattern, the <ph
conref="apigw_conref.dita#common/apigw"/> provides the following IBM extensions to the
standard Swagger specification.</p>
<section>
<title>API collection</title>
<p>An API collection allows you to group a set of plans and subscribers to make APIs available to a
specific group of API clients. An <ph conref="apigw_conref.dita#common/apigw"/> can
comprise one or more collections.</p>
<p>The APIs in a collection are served on a specific path, which is called routing prefix. To access
the APIs in a collection, the URL of the API request must match the URL that is formed by the
routing prefix of the collection, the base path of the API, and the relative path to the target API
operation.</p>
<p><xref href="#apigw_overview/container" format="dita"/> shows an <ph
conref="apigw_conref.dita#common/apigw"/> with three API collections, each collection
packages a set of subscribers and plans. To access an API in collection A, the URL of the API
request must contain the routing prefix of collection A.<fig id="container">
<title>API collections</title>
<image href="apigw_collections.gif" width="500" placement="break" align="left"/>
</fig></p>
</section>
<section>
<title>Assembly</title>
<p>You can assemble processing actions where each action acts on different contexts of an API call
to complete the required API operation. The configuration that assembles the processing actions is
an assembly. The <ph conref="apigw_conref.dita#common/apigw"/> responds to an API
request by running the assembly of the matching API. An assembly consists of an assembly rule and a
set of error handling policies. <ul>
<li>An assembly rule comprises various processing actions to act on the API context.</li>
<li>An error handling policy defines how to handle a specific error.</li>
</ul></p>
</section>
<section>
<title>API property</title>
<p>You can create custom API properties for an API. The property value can vary with the API
collection that the API is provisioned in. The collection-specific API properties allow you to use
the same API definition in different API collections where each collection is slightly different
from each other.</p>
</section>
</conbody>
<related-links>
<link href="http://swagger.io/specification/" format="html" scope="external">
<linktext>Swagger specification version 2.0: http://swagger.io/specification/</linktext>
</link>
</related-links>
</concept>
